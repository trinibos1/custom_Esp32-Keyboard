<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trkey Configurator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <style>
        /* Custom scrollbar styling for Tailwind's custom-scrollbar class */
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #3f3f46; /* zinc-700 */
            border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #ef4444; /* red-500 */
            border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #dc2626; /* red-600 */
        }
        /* Ensure the body and root div take full height */
        html, body, #root {
            height: 100%;
            margin: 0;
            overflow: hidden; /* Prevent body scroll, let content scroll */
        }
    </style>
</head>
<body class="font-inter">
    <div id="root"></div>

    <script type="text/babel">
        // All React component code consolidated here
        const presets = {
            "BASIC": [
                { combo: "M", description: "Move" },
                { combo: "V", description: "Via" },
                { combo: "R", description: "Rotate" },
                { combo: "Del", description: "Delete" },
                { combo: "Ctrl+Z", description: "Undo" },
                { combo: "Ctrl+Y", description: "Redo" },
                { combo: "F1", description: "Help" },
                { combo: "F2", description: "Rename" },
                { combo: "F3", description: "Search" },
                { combo: "L", description: "Line" },
                { combo: "E", description: "Extrude" },
                { combo: "P", description: "Project" },
                { combo: "C", description: "Circle" },
                { combo: "Q", description: "Press/Pull" },
                { combo: "X", description: "Cut" },
                { combo: "S", description: "Sketch" },
                { combo: "T", description: "Text" },
                { combo: "Ctrl+C", description: "Copy" },
                { combo: "Ctrl+V", description: "Paste" },
                { combo: "Ctrl+Z", description: "Undo" },
                { combo: "Ctrl+X", description: "Cut" },
                { combo: "Ctrl+S", description: "Save" },
                { combo: "Ctrl+Shift+G", description: "Ungroup" },
                { combo: "Alt+Shift+B", description: "Bring to Back" },
                { combo: "Ctrl+D", description: "Duplicate" },
                { combo: "Ctrl+Alt+K", description: "Lock" },
                { combo: "Ctrl+P", description: "Command Palette" },
                { combo: "Ctrl+Shift+P", description: "Show All Commands" },
                { combo: "Ctrl+F", description: "Find" },
                { combo: "Alt+Shift+F", description: "Format Document" },
            ],
            "MEDIA": [
                { combo: "KC_MPRV", description: "Prev Track" },
                { combo: "KC_MNXT", description: "Next Track" },
                { combo: "KC_MPLY", description: "Play/Pause" },
                { combo: "KC_MUTE", description: "Mute" },
                { combo: "KC_VOLU", description: "Volume Up" },
                { combo: "KC_VOLD", description: "Volume Down" },
            ],
            "MACRO": [
                { combo: "MACRO_1", description: "Macro 1" },
                { combo: "MACRO_2", description: "Macro 2" },
                { combo: "MACRO_3", description: "Macro 3" },
            ],
            "LAYERS": [
                { combo: "TG(1)", description: "Toggle Layer 1" },
                { combo: "MO(1)", description: "Momentary Layer 1" },
                { combo: "TO(0)", description: "To Layer 0" },
            ],
            "SPECIAL": [
                { combo: "KC_PWR", description: "Power" },
                { combo: "KC_SLEP", description: "Sleep" },
                { combo: "KC_WAKE", description: "Wake" },
            ],
            "QMK LIGHTING": [
                { combo: "RGB_TOG", description: "RGB Toggle" },
                { combo: "RGB_MOD", description: "RGB Mode" },
                { combo: "RGB_HUI", description: "Hue Inc" },
                { combo: "RGB_HUD", description: "Hue Dec" },
                { combo: "RGB_SAI", description: "Sat Inc" },
                { combo: "RGB_SAD", description: "Sat Dec" },
                { combo: "RGB_VAI", description: "Val Inc" },
                { combo: "RGB_VAD", description: "Val Dec" },
            ]
        };

        const initialGrid = Array(3).fill().map(() => Array(3).fill({ tap: null, hold: null }));

        // Modal component for displaying messages
        const Modal = ({ show, title, message, onClose }) => {
            if (!show) return null;
            return (
                <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50">
                    <div className="bg-zinc-800 text-white p-6 rounded-lg shadow-xl max-w-sm w-full border-2 border-red-500">
                        <h3 className="text-xl font-bold mb-4 text-red-400">{title}</h3>
                        {message && <p className="mb-4">{message}</p>}
                        <div className="flex justify-end">
                            <button
                                onClick={onClose}
                                className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-xl shadow-lg transition-colors duration-200"
                            >
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        // Custom Modal for confirmation (replaces window.confirm)
        const ConfirmationModal = ({ show, title, message, onConfirm, onCancel }) => {
            if (!show) return null;
            return (
                <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50">
                    <div className="bg-zinc-800 text-white p-6 rounded-lg shadow-xl max-w-sm w-full border-2 border-red-500">
                        <h3 className="text-xl font-bold mb-4 text-red-400">{title}</h3>
                        {message && <p className="mb-4">{message}</p>}
                        <div className="flex justify-end space-x-4">
                            <button
                                onClick={onCancel}
                                className="bg-zinc-600 hover:bg-zinc-700 px-4 py-2 rounded-xl shadow-lg transition-colors duration-200"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={onConfirm}
                                className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-xl shadow-lg transition-colors duration-200"
                            >
                                Confirm
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        const Sidebar = ({ activeTab, setActiveTab }) => {
            return (
                <div className="w-64 bg-zinc-900 p-6 flex flex-col border-r border-zinc-700 shadow-xl">
                    <div className="text-2xl font-bold text-red-500 mb-8">Trkey</div>
                    <nav className="flex-grow">
                        <ul className="space-y-4">
                            <li>
                                <a href="#" onClick={() => setActiveTab('keymap')} className={`flex items-center ${activeTab === 'keymap' ? 'text-red-300' : 'text-zinc-400'} hover:text-red-500 font-semibold text-lg transition-colors duration-200`}>
                                    <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                                    KEYMAP
                                </a>
                            </li>
                            <li>
                                <a href="#" onClick={() => setActiveTab('macros')} className={`flex items-center ${activeTab === 'macros' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                                    <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M12 6.293V4a1 1 0 00-1-1H5a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 001-1v-2.293l1.707 1.707a1 1 0 001.414-1.414l-4-4a1 1 0 00-1.414 0l-4 4a1 1 0 001.414 1.414L10 10.414V12a1 1 0 001 1h2a1 1 0 001-1V8.293l1.707 1.707a1 1 0 001.414-1.414l-4-4z"></path></svg>
                                    MACROS
                                </a>
                            </li>
                            <li>
                                <a href="#" onClick={() => setActiveTab('controls')} className={`flex items-center ${activeTab === 'controls' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                                    <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 100-2 1 1 0 000 2zm6-1a1 1 0 100-2 1 1 0 000 2zm-3 8a1 1 0 100-2 1 1 0 000 2z"></path></svg>
                                    CONTROLS
                                </a>
                            </li>
                            <li>
                                <a href="#" onClick={() => setActiveTab('save-load')} className={`flex items-center ${activeTab === 'save-load' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                                    <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z"></path></svg>
                                    SAVE + LOAD
                                </a>
                            </li>
                            <li>
                                <a href="#" onClick={() => setActiveTab('settings')} className={`flex items-center ${activeTab === 'settings' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                                    <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M10 2a1 1 0 00-1 1v1a1 1 0 002 0V3a1 1 0 00-1-1zm4 4a1 1 0 011 1v1a1 1 0 01-2 0V7a1 1 0 011-1zM6 6a1 1 0 00-1 1v1a1 1 0 002 0V7a1 1 0 00-1-1zm0 8a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zm8 0a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zm-4 4a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zM2 10a1 1 0 001 1h1a1 1 0 000-2H3a1 1 0 00-1 1zm14 0a1 1 0 001 1h1a1 1 0 000-2h-1a1 1 0 00-1 1zM7 10a3 3 0 116 0 3 3 0 01-6 0z"></path></svg>
                                    SETTINGS
                                </a>
                            </li>
                            <li>
                                <a href="#" onClick={() => setActiveTab('keytester')} className={`flex items-center ${activeTab === 'keytester' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                                    <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M11 3a1 1 0 10-2 0v1a1 1 0 002 0V3zM14 8a1 1 0 011 1v1a1 1 0 11-2 0V9a1 1 0 011-1zM6 8a1 1 0 00-1 1v1a1 1 0 002 0V9a1 1 0 00-1-1zm0 4a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zm8 0a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zm-4 4a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zM2 10a1 1 0 001 1h1a1 1 0 000-2H3a1 1 0 00-1 1zm14 0a1 1 0 001 1h1a1 1 0 000-2h-1a1 1 0 00-1 1zM7 10a3 3 0 116 0 3 3 0 01-6 0z"></path></svg>
                                    KEY TESTER
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            );
        };

        const KeymapGrid = ({ keymap, handleDrop, handleKeymapDragStart, handleDragEnd, clearKeymapCell }) => {
            const { useState, useEffect } = React; // Import React hooks
            return (
                <div className="grid grid-cols-3 gap-4 mb-12 w-full max-w-md mx-auto">
                    {keymap.map((row, rIdx) => (
                        row.map((cell, cIdx) => (
                            <div
                                key={`${rIdx}-${cIdx}`}
                                className="relative bg-zinc-700 rounded-xl p-4 h-32 flex flex-col items-center justify-center border-2 border-zinc-600 shadow-md
                                            hover:border-red-500 transition-all duration-200 cursor-grab"
                                onDragOver={(e) => e.preventDefault()}
                                onDrop={(e) => handleDrop(e, rIdx, cIdx)}
                                draggable
                                onDragStart={(e) => handleKeymapDragStart(e, cell, rIdx, cIdx)}
                                onDragEnd={handleDragEnd}
                            >
                                {cell.tap ? (
                                    <>
                                        <span className="text-2xl font-bold text-red-300">{cell.tap.combo}</span>
                                        <span className="text-sm text-zinc-400 text-center mt-1">{cell.tap.description}</span>
                                    </>
                                ) : (
                                    <span className="text-zinc-500">Drag & Drop Here</span>
                                )}
                                {(cell.tap || cell.hold) && (
                                    <button
                                        onClick={() => clearKeymapCell(rIdx, cIdx)}
                                        className="absolute top-1 right-1 text-zinc-400 hover:text-red-500 text-sm p-1 rounded-full bg-zinc-600 hover:bg-zinc-500 transition-colors"
                                        title="Clear cell"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                                            <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </button>
                                )}
                            </div>
                        ))
                    ))}
                </div>
            );
        };

        const ShortcutPool = ({ shortcutPool, draggedShortcut, handleShortcutDragStart, handleDragEnd }) => {
            const { useState, useEffect } = React; // Import React hooks
            return (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 custom-scrollbar max-h-96 overflow-y-auto pr-4">
                    {Object.entries(shortcutPool).map(([app, shortcuts]) => (
                        <div key={app} className="bg-zinc-700 rounded-xl p-4 border-2 border-zinc-600 shadow-lg">
                            <h3 className="text-xl font-semibold text-red-300 mb-3">{app}</h3>
                            <div className="space-y-2">
                                {shortcuts.map((shortcut, sIdx) => (
                                    <div
                                        key={`${app}-${sIdx}`}
                                        className={`bg-zinc-600 rounded-lg p-3 flex flex-col items-start cursor-grab
                                                    ${draggedShortcut === shortcut ? 'opacity-50 border-red-500 border-2' : 'border-2 border-zinc-600'}
                                                    hover:bg-zinc-500 hover:border-red-400 transition-all duration-200`}
                                        draggable
                                        onDragStart={(e) => handleShortcutDragStart(e, shortcut)}
                                        onDragEnd={handleDragEnd}
                                    >
                                        <span className="font-medium text-lg">{shortcut.combo}</span>
                                        <span className="text-sm text-zinc-300">{shortcut.description}</span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            );
        };

        const MacroManagement = ({ macros, addMacro, editMacro, deleteMacro }) => {
            const { useState, useEffect } = React; // Import React hooks
            return (
                <div className="flex flex-col items-center w-full">
                    <h1 className="text-4xl font-extrabold text-red-400 mb-8">MACRO MANAGEMENT</h1>
                    <button
                        onClick={addMacro}
                        className="bg-red-600 hover:bg-red-700 px-6 py-3 rounded-xl shadow-lg transition-colors duration-200 text-lg font-semibold mb-8"
                    >
                        Add New Macro
                    </button>

                    {macros.length === 0 ? (
                        <p className="text-zinc-400 text-lg">No macros defined yet. Click "Add New Macro" to create one.</p>
                    ) : (
                        <div className="w-full max-w-2xl bg-zinc-700 rounded-xl p-6 shadow-lg border-2 border-zinc-600">
                            <h2 className="text-2xl font-bold text-red-300 mb-4">Defined Macros</h2>
                            <ul className="space-y-4">
                                {macros.map(macro => (
                                    <li key={macro.id} className="bg-zinc-600 rounded-lg p-4 flex flex-col sm:flex-row justify-between items-start sm:items-center shadow-md border border-zinc-500">
                                        <div>
                                            <p className="text-xl font-semibold text-white">{macro.name}</p>
                                            <p className="text-zinc-300 text-sm break-all">Sequence: "{macro.sequence}"</p>
                                        </div>
                                        <div className="flex space-x-3 mt-3 sm:mt-0">
                                            <button
                                                onClick={() => editMacro(macro.id)}
                                                className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-md text-sm transition-colors duration-200"
                                            >
                                                Edit
                                            </button>
                                            <button
                                                onClick={() => deleteMacro(macro.id)}
                                                className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded-md text-sm transition-colors duration-200"
                                            >
                                                Delete
                                            </button>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>
            );
        };

        const PeripheralControls = ({ potentiometerConfig, setPotentiometerConfig }) => {
            const { useState, useEffect } = React; // Import React hooks
            return (
                <div className="flex flex-col items-center w-full">
                    <h1 className="text-4xl font-extrabold text-red-400 mb-8">PERIPHERAL CONTROLS</h1>

                    <div className="w-full max-w-xl bg-zinc-700 rounded-xl p-6 shadow-lg border-2 border-zinc-600">
                        <h2 className="text-2xl font-bold text-red-300 mb-4">Potentiometer Configuration</h2>
                        <div className="space-y-4">
                            <div className="flex items-center justify-between">
                                <label htmlFor="potentiometer-enable" className="text-lg text-zinc-200">Enable Potentiometer:</label>
                                <input
                                    type="checkbox"
                                    id="potentiometer-enable"
                                    checked={potentiometerConfig.enabled}
                                    onChange={(e) => setPotentiometerConfig(prev => ({ ...prev, enabled: e.target.checked }))}
                                    className="form-checkbox h-6 w-6 text-red-600 rounded focus:ring-red-500"
                                />
                            </div>

                            {potentiometerConfig.enabled && (
                                <>
                                    <div className="flex items-center justify-between">
                                        <label htmlFor="potentiometer-pin" className="text-lg text-zinc-200">Analog Pin:</label>
                                        <input
                                            type="number"
                                            id="potentiometer-pin"
                                            value={potentiometerConfig.pin}
                                            onChange={(e) => setPotentiometerConfig(prev => ({ ...prev, pin: parseInt(e.target.value) || 0 }))}
                                            className="bg-zinc-800 border border-zinc-600 rounded-md p-2 w-24 text-white"
                                        />
                                    </div>

                                    <div className="flex items-center justify-between">
                                        <label htmlFor="potentiometer-function" className="text-lg text-zinc-200">Function:</label>
                                        <select
                                            id="potentiometer-function"
                                            value={potentiometerConfig.function}
                                            onChange={(e) => setPotentiometerConfig(prev => ({ ...prev, function: e.target.value }))}
                                            className="bg-zinc-800 border border-zinc-600 rounded-md p-2 text-white"
                                        >
                                            <option value="volume">Volume Control</option>
                                            <option value="scroll">Scroll</option>
                                            <option value="custom">Custom QMK Keycode</option>
                                        </select>
                                    </div>

                                    {potentiometerConfig.function === 'custom' && (
                                        <div className="flex items-center justify-between">
                                            <label htmlFor="custom-action" className="text-lg text-zinc-200">Custom QMK Keycode:</label>
                                            <input
                                                type="text"
                                                id="custom-action"
                                                value={potentiometerConfig.customAction}
                                                onChange={(e) => setPotentiometerConfig(prev => ({ ...prev, customAction: e.target.value }))}
                                                placeholder="e.g., KC_MPLY"
                                                className="bg-zinc-800 border border-zinc-600 rounded-md p-2 w-48 text-white"
                                            />
                                        </div>
                                    )}
                                </>
                            )}
                        </div>
                    </div>
                </div>
            );
        };

        const SaveLoad = ({ saveProfile, loadProfile, exportKeymap, uploadToDevice }) => {
            const { useState, useEffect } = React; // Import React hooks
            return (
                <div className="flex flex-col items-center w-full">
                    <h1 className="text-4xl font-extrabold text-red-400 mb-8">SAVE & LOAD PROFILE</h1>
                    <div className="flex flex-col space-y-4 w-full max-w-md">
                        <button
                            onClick={saveProfile}
                            className="bg-red-600 hover:bg-red-700 px-6 py-3 rounded-xl shadow-lg transition-colors duration-200 text-lg font-semibold"
                        >
                            Save Profile to Browser
                        </button>
                        <button
                            onClick={loadProfile}
                            className="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded-xl shadow-lg transition-colors duration-200 text-lg font-semibold"
                        >
                            Load Profile from Browser
                        </button>
                        <button
                            onClick={exportKeymap}
                            className="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-xl shadow-lg transition-colors duration-200 text-lg font-semibold"
                        >
                            Export Configuration as JSON
                        </button>
                        <button
                            onClick={uploadToDevice}
                            className="bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-xl shadow-lg transition-colors duration-200 text-lg font-semibold"
                        >
                            Upload to Device (Web Serial)
                        </button>
                    </div>
                </div>
            );
        };

        const Settings = ({ jsonInput, setJsonInput, loadJsonFromTextArea }) => {
            const { useState, useEffect } = React; // Import React hooks
            return (
                <div className="flex flex-col items-center w-full">
                    <h1 className="text-4xl font-extrabold text-red-400 mb-8">SETTINGS</h1>
                    <div className="w-full max-w-2xl bg-zinc-700 rounded-xl p-6 shadow-lg border-2 border-zinc-600">
                        <h2 className="text-2xl font-bold text-red-300 mb-4">Import JSON Configuration</h2>
                        <textarea
                            className="w-full h-64 bg-zinc-800 border border-zinc-600 rounded-md p-4 text-white font-mono text-sm resize-y"
                            placeholder="Paste your JSON configuration here..."
                            value={jsonInput}
                            onChange={(e) => setJsonInput(e.target.value)}
                        ></textarea>
                        <button
                            onClick={loadJsonFromTextArea}
                            className="mt-4 bg-teal-600 hover:bg-teal-700 px-6 py-3 rounded-xl shadow-lg transition-colors duration-200 text-lg font-semibold w-full"
                        >
                            Load JSON
                        </button>
                    </div>
                </div>
            );
        };

        const KeyTester = ({ activeTab }) => {
            const { useState, useEffect } = React; // Import React hooks
            const [pressedKeys, setPressedKeys] = useState([]);

            useEffect(() => {
                if (activeTab === 'keytester') {
                    const handleKeyDown = (e) => {
                        e.preventDefault();
                        setPressedKeys(prev => {
                            const newKey = { key: e.key, code: e.code, timestamp: Date.now() };
                            if (!prev.some(k => k.code === e.code && k.type === 'down')) {
                                return [...prev, { ...newKey, type: 'down' }];
                            }
                            return prev;
                        });
                    };

                    const handleKeyUp = (e) => {
                        e.preventDefault();
                        setPressedKeys(prev => prev.filter(k => k.code !== e.code));
                    };

                    window.addEventListener('keydown', handleKeyDown);
                    window.addEventListener('keyup', handleKeyUp);

                    return () => {
                        window.removeEventListener('keydown', handleKeyDown);
                        window.removeEventListener('keyup', handleKeyUp);
                    };
                } else {
                    setPressedKeys([]);
                }
            }, [activeTab]);

            return (
                <div className="flex flex-col items-center w-full">
                    <h1 className="text-4xl font-extrabold text-red-400 mb-8">KEY TESTER</h1>
                    <p className="text-zinc-300 mb-6 text-lg">Press any key on your keyboard to see its details.</p>
                    <div className="w-full max-w-2xl bg-zinc-700 rounded-xl p-6 shadow-lg border-2 border-zinc-600 min-h-[200px] flex flex-wrap items-center justify-center gap-4">
                        {pressedKeys.length === 0 ? (
                            <p className="text-zinc-400 text-xl">No keys pressed...</p>
                        ) : (
                            pressedKeys.map((keyInfo, index) => (
                                <div
                                    key={keyInfo.code + '-' + keyInfo.timestamp}
                                    className="bg-zinc-600 rounded-lg p-4 shadow-md border border-zinc-500 flex flex-col items-center justify-center min-w-[120px]"
                                >
                                    <span className="text-xl font-bold text-red-300">{keyInfo.key === ' ' ? 'Space' : keyInfo.key}</span>
                                    <span className="text-sm text-zinc-400 mt-1">{keyInfo.code}</span>
                                </div>
                            ))
                        )}
                    </div>
                </div>
            );
        };

        function App() {
            const { useState, useEffect, useCallback } = React; // Import React hooks

            const [keymap, setKeymap] = useState(initialGrid);
            const [shortcutPool, setShortcutPool] = useState(Object.fromEntries(Object.entries(presets).map(([k, v]) => [k, [...v]])));
            const [showModal, setShowModal] = useState(false);
            const [modalContent, setModalContent] = useState({ title: "", message: "" });
            const [draggedShortcut, setDraggedShortcut] = useState(null);
            const [activeTab, setActiveTab] = useState('keymap');
            const [jsonInput, setJsonInput] = useState('');

            const [macros, setMacros] = useState([
                { id: 1, name: "Hello World", sequence: "Hello World!" },
                { id: 2, name: "Signature", sequence: "John Doe\nSoftware Engineer" },
            ]);
            const [nextMacroId, setNextMacroId] = useState(3);

            const [potentiometerConfig, setPotentiometerConfig] = useState({
                enabled: false,
                pin: 34,
                function: 'volume',
                customAction: ''
            });

            // Load profile on component mount
            useEffect(() => {
                loadProfile();
            }, []);

            // Handlers for drag and drop
            const handleDrop = (e, row, col) => {
                e.preventDefault();
                const data = e.dataTransfer.getData("text/plain");
                const updatedKeymap = [...keymap];

                try {
                    const droppedItem = JSON.parse(data);
                    if (droppedItem.isKeymapCell) {
                        const sourceRow = droppedItem.sourceRow;
                        const sourceCol = droppedItem.sourceCol;
                        const tempCell = updatedKeymap[row][col];
                        updatedKeymap[row][col] = droppedItem.cell;
                        updatedKeymap[sourceRow][sourceCol] = tempCell;
                    } else {
                        updatedKeymap[row][col] = { tap: droppedItem, hold: null };
                    }
                    setKeymap(updatedKeymap);
                } catch (error) {
                    console.error("Failed to parse dropped data:", error);
                    updatedKeymap[row][col] = { tap: { combo: data, description: data }, hold: null };
                    setKeymap(updatedKeymap);
                }
                setDraggedShortcut(null);
            };

            const handleKeymapDragStart = (e, cell, row, col) => {
                const dragData = JSON.stringify({ isKeymapCell: true, cell: cell, sourceRow: row, sourceCol: col });
                e.dataTransfer.setData("text/plain", dragData);
            };

            const handleShortcutDragStart = (e, shortcut) => {
                e.dataTransfer.setData("text/plain", JSON.stringify(shortcut));
                setDraggedShortcut(shortcut);
            };

            const handleDragEnd = () => {
                setDraggedShortcut(null);
            };

            const clearKeymapCell = (rIdx, cIdx) => {
                const updatedKeymap = [...keymap];
                updatedKeymap[rIdx][cIdx] = { tap: null, hold: null };
                setKeymap(updatedKeymap);
            };

            // Profile Management
            const saveProfile = () => {
                const profileData = {
                    keymap: keymap,
                    potentiometerConfig: potentiometerConfig,
                    macros: macros
                };
                localStorage.setItem("trkey_profile", JSON.stringify(profileData));
                setModalContent({
                    title: "Profile Saved",
                    message: "Profile saved to browser storage."
                });
                setShowModal(true);
            };

            const loadProfile = () => {
                const saved = localStorage.getItem("trkey_profile");
                if (saved) {
                    const profileData = JSON.parse(saved);
                    setKeymap(profileData.keymap || initialGrid);
                    setPotentiometerConfig(profileData.potentiometerConfig || { enabled: false, pin: 34, function: 'volume', customAction: '' });
                    setMacros(profileData.macros || []);
                    setModalContent({
                        title: "Profile Loaded",
                        message: "Profile loaded successfully."
                    });
                } else {
                    setModalContent({
                        title: "No Profile Found",
                        message: "No saved profile found."
                    });
                }
                setShowModal(true);
            };

            // Export and Upload
            const exportKeymap = () => {
                const fullMap = {
                    layout: "3x3",
                    layers: {
                        default: keymap.map(row => row.map(cell => ({
                            tap: cell.tap ? cell.tap.combo : "",
                            hold: cell.hold ? cell.hold.combo : ""
                        }))),
                    },
                    peripherals: {
                        potentiometers: [
                            potentiometerConfig.enabled ? {
                                pin: potentiometerConfig.pin,
                                function: potentiometerConfig.function,
                                customAction: potentiometerConfig.customAction
                            } : null
                        ].filter(Boolean)
                    },
                    macros: macros.map(m => ({ name: m.name, sequence: m.sequence }))
                };
                const blob = new Blob([JSON.stringify(fullMap, null, 2)], { type: "application/json" });
                const url = URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "trkey_config.json";
                a.click();
                setModalContent({
                    title: "Export Successful",
                    message: "Configuration exported as trkey_config.json."
                });
                setShowModal(true);
            };

            const uploadToDevice = async () => {
                try {
                    if ('serial' in navigator) {
                        const port = await navigator.serial.requestPort();
                        await port.open({ baudRate: 115200 });
                        const writer = port.writable.getWriter();
                        const fullMap = {
                            layout: "3x3",
                            layers: {
                                default: keymap.map(row => row.map(cell => ({
                                    tap: cell.tap ? cell.tap.combo : "",
                                    hold: cell.hold ? cell.hold.combo : ""
                                }))),
                            },
                            peripherals: {
                                potentiometers: [
                                    potentiometerConfig.enabled ? {
                                        pin: potentiometerConfig.pin,
                                        function: potentiometerConfig.function,
                                        customAction: potentiometerConfig.customAction
                                    } : null
                                ].filter(Boolean)
                            },
                            macros: macros.map(m => ({ name: m.name, sequence: m.sequence }))
                        };
                        const json = JSON.stringify(fullMap);
                        const encoder = new TextEncoder();
                        await writer.write(encoder.encode(json));
                        writer.releaseLock();
                        await port.close();
                        setModalContent({
                            title: "Upload Successful",
                            message: "Configuration uploaded successfully!"
                        });
                    } else {
                        setModalContent({
                            title: "Web Serial API Not Supported",
                            message: "Your browser does not support the Web Serial API. Please use a Chromium-based browser (e.g., Chrome, Edge) to upload to device."
                        });
                    }
                } catch (err) {
                    setModalContent({
                        title: "Upload Failed",
                        message: "Failed to upload: " + err.message
                    });
                } finally {
                    setShowModal(true);
                }
            };

            // JSON Import
            const loadJsonFromTextArea = () => {
                try {
                    const parsedJson = JSON.parse(jsonInput);
                    if (parsedJson.layers && parsedJson.layers.default) {
                        const newKeymap = parsedJson.layers.default.map(row =>
                            row.map(combo => {
                                const foundPreset = Object.values(presets).flat().find(p => p.combo === combo);
                                return {
                                    tap: combo ? { combo: combo, description: foundPreset ? foundPreset.description : combo } : null,
                                    hold: null
                                };
                            })
                        );
                        const finalKeymap = Array(3).fill().map((_, rIdx) =>
                            Array(3).fill().map((_, cIdx) =>
                                newKeymap[rIdx] && newKeymap[rIdx][cIdx] ? newKeymap[rIdx][cIdx] : { tap: null, hold: null }
                            )
                        );
                        setKeymap(finalKeymap);

                        if (parsedJson.peripherals && parsedJson.peripherals.potentiometers && parsedJson.peripherals.potentiometers.length > 0) {
                            const loadedPot = parsedJson.peripherals.potentiometers[0];
                            setPotentiometerConfig({
                                enabled: true,
                                pin: loadedPot.pin || 34,
                                function: loadedPot.function || 'volume',
                                customAction: loadedPot.customAction || ''
                            });
                        } else {
                            setPotentiometerConfig({ enabled: false, pin: 34, function: 'volume', customAction: '' });
                        }

                        if (parsedJson.macros && Array.isArray(parsedJson.macros)) {
                            setMacros(parsedJson.macros.map((m, idx) => ({ id: idx + 1, name: m.name, sequence: m.sequence })));
                            setNextMacroId(parsedJson.macros.length + 1);
                        } else {
                            setMacros([]);
                            setNextMacroId(1);
                        }

                        setModalContent({
                            title: "JSON Loaded",
                            message: "Configuration loaded from text area successfully."
                        });
                    } else {
                        setModalContent({
                            title: "Invalid JSON",
                            message: "The pasted JSON does not contain a valid 'layers.default' structure."
                        });
                    }
                } catch (error) {
                    setModalContent({
                        title: "JSON Parsing Error",
                        message: "Failed to parse JSON: " + error.message
                    });
                } finally {
                    setShowModal(true);
                }
            };

            // Macro functions
            const addMacro = () => {
                const name = prompt("Enter macro name:");
                if (!name) return;
                const sequence = prompt("Enter macro sequence (e.g., 'Hello World!'):");
                if (sequence) {
                    setMacros(prev => [...prev, { id: nextMacroId, name, sequence }]);
                    setNextMacroId(prev => prev + 1);
                }
            };

            const editMacro = (id) => {
                const macroToEdit = macros.find(m => m.id === id);
                if (!macroToEdit) return;

                const newName = prompt(`Edit name for "${macroToEdit.name}":`, macroToEdit.name);
                if (newName === null) return;

                const newSequence = prompt(`Edit sequence for "${macroToEdit.name}":`, macroToEdit.sequence);
                if (newSequence === null) return;

                setMacros(prev => prev.map(m =>
                    m.id === id ? { ...m, name: newName, sequence: newSequence } : m
                ));
            };

            const deleteMacro = (id) => {
                setModalContent({
                    title: "Confirm Delete",
                    message: "Are you sure you want to delete this macro?",
                    onConfirm: () => {
                        setMacros(prev => prev.filter(m => m.id !== id));
                        setShowModal(false);
                    },
                    onCancel: () => setShowModal(false)
                });
                setShowModal(true);
            };

            return (
                <div className="min-h-screen bg-zinc-800 text-white flex font-inter">
                    {/* Sidebar */}
                    <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />

                    {/* Main Content Area */}
                    <div className="flex-1 flex flex-col p-8 overflow-auto">
                        {activeTab === 'keymap' && (
                            <>
                                <h1 className="text-4xl font-extrabold text-red-400 mb-8">KEYMAP CONFIGURATION</h1>
                                <KeymapGrid
                                    keymap={keymap}
                                    handleDrop={handleDrop}
                                    handleKeymapDragStart={handleKeymapDragStart}
                                    handleDragEnd={handleDragEnd}
                                    clearKeymapCell={clearKeymapCell}
                                />
                                <h2 className="text-3xl font-bold text-red-400 mb-6">SHORTCUTS</h2>
                                <ShortcutPool
                                    shortcutPool={shortcutPool}
                                    draggedShortcut={draggedShortcut}
                                    handleShortcutDragStart={handleShortcutDragStart}
                                    handleDragEnd={handleDragEnd}
                                />
                            </>
                        )}

                        {activeTab === 'macros' && (
                            <MacroManagement
                                macros={macros}
                                addMacro={addMacro}
                                editMacro={editMacro}
                                deleteMacro={deleteMacro}
                            />
                        )}

                        {activeTab === 'controls' && (
                            <PeripheralControls
                                potentiometerConfig={potentiometerConfig}
                                setPotentiometerConfig={setPotentiometerConfig}
                            />
                        )}

                        {activeTab === 'save-load' && (
                            <SaveLoad
                                saveProfile={saveProfile}
                                loadProfile={loadProfile}
                                exportKeymap={exportKeymap}
                                uploadToDevice={uploadToDevice}
                            />
                        )}

                        {activeTab === 'settings' && (
                            <Settings
                                jsonInput={jsonInput}
                                setJsonInput={setJsonInput}
                                loadJsonFromTextArea={loadJsonFromTextArea}
                            />
                        )}

                        {activeTab === 'keytester' && (
                            <KeyTester activeTab={activeTab} />
                        )}
                    </div>

                    {/* Modals */}
                    <Modal
                        show={showModal && !modalContent.onConfirm}
                        title={modalContent.title}
                        message={modalContent.message}
                        onClose={() => setShowModal(false)}
                    />
                    <ConfirmationModal
                        show={showModal && modalContent.onConfirm}
                        title={modalContent.title}
                        message={modalContent.message}
                        onConfirm={modalContent.onConfirm}
                        onCancel={modalContent.onCancel}
                    />
                </div>
            );
        }

        // Render the App component into the 'root' div
        ReactDOM.createRoot(document.getElementById('root')).render(<App />);
    </script>
</body>
</html>

