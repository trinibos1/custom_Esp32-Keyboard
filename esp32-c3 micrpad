// Required Libraries
#include <BleKeyboard.h> // For Bluetooth Low Energy (BLE) HID
#include "USB.h"         // For USB HID
#include "USBHIDKeyboard.h" // For USB HID Keyboard functionality

// Define the name for your Bluetooth device
#define BLE_KEYBOARD_NAME "Trkey_Micropad"

// USB HID Keyboard object
USBHIDKeyboard Keyboard;

// BLE Keyboard object
BleKeyboard bleKeyboard(BLE_KEYBOARD_NAME, "Trkey", 100); // Name, Manufacturer, Battery Level (optional)

// --- Key Matrix Configuration ---
const int NUM_ROWS = 3;
const int NUM_COLS = 3;

// Define the GPIO pins for rows and columns for XIAO ESP32C3
// Pins 1 through 6 are used as requested.
const int ROW_PINS[NUM_ROWS] = {1, 2, 3}; // GPIO1, GPIO2, GPIO3
const int COL_PINS[NUM_COLS] = {4, 5, 6}; // GPIO4, GPIO5, GPIO6

// Define the keymap for your 3x3 matrix
// This is a simplified example. In a real application, this would be loaded from the web app.
// Make sure to use HID keycodes (e.g., KEY_A, KEY_MEDIA_VOLUME_UP, etc.)
// For basic alphanumeric keys, you can often use their ASCII values directly with Keyboard.write()
// For special keys, you need the specific HID codes defined in the USBHIDKeyboard library (e.g., KEY_MEDIA_VOLUME_UP).
const char KEYMAP[NUM_ROWS][NUM_COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'}
};

// State to keep track of previous button presses to detect changes (press/release)
bool lastButtonState[NUM_ROWS][NUM_COLS];

void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(115200);
  Serial.println("Starting Trkey Micropad Firmware for XIAO ESP32C3 with Matrix...");

  // Initialize USB HID Keyboard
  USB.begin();
  Keyboard.begin();
  Serial.println("USB HID Keyboard initialized.");

  // Initialize BLE Keyboard
  bleKeyboard.begin();
  Serial.println("BLE Keyboard initialized.");

  // Configure row pins as INPUT_PULLUP
  // When a column is pulled LOW, a pressed button will pull the corresponding row LOW.
  for (int i = 0; i < NUM_ROWS; i++) {
    pinMode(ROW_PINS[i], INPUT_PULLUP);
    Serial.print("Row Pin "); Serial.print(ROW_PINS[i]); Serial.println(" configured as INPUT_PULLUP");
  }

  // Configure column pins as OUTPUT and set them HIGH initially
  // We will set one column LOW at a time during scanning.
  for (int i = 0; i < NUM_COLS; i++) {
    pinMode(COL_PINS[i], OUTPUT);
    digitalWrite(COL_PINS[i], HIGH);
    Serial.print("Column Pin "); Serial.print(COL_PINS[i]); Serial.println(" configured as OUTPUT HIGH");
  }

  // Initialize lastButtonState array to false (no buttons pressed initially)
  for (int i = 0; i < NUM_ROWS; i++) {
    for (int j = 0; j < NUM_COLS; j++) {
      lastButtonState[i][j] = false;
    }
  }
}

void loop() {
  // --- Matrix Scanning Logic ---
  // Iterate through each column
  for (int col = 0; col < NUM_COLS; col++) {
    // Activate the current column by setting it LOW
    digitalWrite(COL_PINS[col], LOW);
    delayMicroseconds(50); // Small delay for pin state to stabilize

    // Read the state of each row for the current active column
    for (int row = 0; row < NUM_ROWS; row++) {
      // If the button at (row, col) is pressed, the row pin will be LOW
      bool currentButtonState = (digitalRead(ROW_PINS[row]) == LOW);

      // Check if the button state has changed since the last scan
      if (currentButtonState != lastButtonState[row][col]) {
        if (currentButtonState) {
          // Button is pressed
          Serial.print("Button pressed at (Row: "); Serial.print(row);
          Serial.print(", Col: "); Serial.print(col);
          Serial.print(") - Key: "); Serial.println(KEYMAP[row][col]);

          // Send key press over BLE and USB
          if (bleKeyboard.isConnected()) {
            bleKeyboard.press(KEYMAP[row][col]);
          }
          if (USB.isConnected()) {
            Keyboard.press(KEYMAP[row][col]);
          }
        } else {
          // Button is released
          Serial.print("Button released at (Row: "); Serial.print(row);
          Serial.print(", Col: "); Serial.print(col);
          Serial.print(") - Key: "); Serial.println(KEYMAP[row][col]);

          // Send key release over BLE and USB
          if (bleKeyboard.isConnected()) {
            bleKeyboard.release(KEYMAP[row][col]);
          }
          if (USB.isConnected()) {
            Keyboard.release(KEYMAP[row][col]);
          }
        }
        lastButtonState[row][col] = currentButtonState; // Update the last state
      }
    }

    // Deactivate the current column by setting it back to HIGH
    digitalWrite(COL_PINS[col], HIGH);
  }

  // Small delay to prevent excessive CPU usage and provide basic debouncing
  delay(10);
}
