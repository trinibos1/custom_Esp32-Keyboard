import React, { useState, useEffect } from "react";

// Restructured presets to include both combo and description
const presets = {
  "BASIC": [
    { combo: "M", description: "Move" },
    { combo: "V", description: "Via" },
    { combo: "R", description: "Rotate" },
    { combo: "Del", description: "Delete" },
    { combo: "Ctrl+Z", description: "Undo" },
    { combo: "Ctrl+Y", description: "Redo" },
    { combo: "F1", description: "Help" },
    { combo: "F2", description: "Rename" },
    { combo: "F3", description: "Search" },
    { combo: "L", description: "Line" },
    { combo: "E", description: "Extrude" },
    { combo: "P", description: "Project" },
    { combo: "C", description: "Circle" },
    { combo: "Q", description: "Press/Pull" },
    { combo: "X", description: "Cut" },
    { combo: "S", description: "Sketch" },
    { combo: "T", description: "Text" },
    { combo: "Ctrl+C", description: "Copy" },
    { combo: "Ctrl+V", description: "Paste" },
    { combo: "Ctrl+Z", description: "Undo" }, // Duplicate, but kept for consistency with original presets
    { combo: "Ctrl+X", description: "Cut" }, // Duplicate, but kept for consistency with original presets
    { combo: "Ctrl+S", description: "Save" }, // Duplicate, but kept for consistency with original presets
    { combo: "Ctrl+Shift+G", description: "Ungroup" },
    { combo: "Alt+Shift+B", description: "Bring to Back" },
    { combo: "Ctrl+D", description: "Duplicate" },
    { combo: "Ctrl+Alt+K", description: "Lock" },
    { combo: "Ctrl+P", description: "Command Palette" },
    { combo: "Ctrl+Shift+P", description: "Show All Commands" },
    { combo: "Ctrl+F", description: "Find" },
    { combo: "Alt+Shift+F", description: "Format Document" },
  ],
  "MEDIA": [
    { combo: "KC_MPRV", description: "Prev Track" },
    { combo: "KC_MNXT", description: "Next Track" },
    { combo: "KC_MPLY", description: "Play/Pause" },
    { combo: "KC_MUTE", description: "Mute" },
    { combo: "KC_VOLU", description: "Volume Up" },
    { combo: "KC_VOLD", description: "Volume Down" },
  ],
  "MACRO": [
    { combo: "MACRO_1", description: "Macro 1" },
    { combo: "MACRO_2", description: "Macro 2" },
    { combo: "MACRO_3", description: "Macro 3" },
  ],
  "LAYERS": [
    { combo: "TG(1)", description: "Toggle Layer 1" },
    { combo: "MO(1)", description: "Momentary Layer 1" },
    { combo: "TO(0)", description: "To Layer 0" },
  ],
  "SPECIAL": [
    { combo: "KC_PWR", description: "Power" },
    { combo: "KC_SLEP", description: "Sleep" },
    { combo: "KC_WAKE", description: "Wake" },
  ],
  "QMK LIGHTING": [
    { combo: "RGB_TOG", description: "RGB Toggle" },
    { combo: "RGB_MOD", description: "RGB Mode" },
    { combo: "RGB_HUI", description: "Hue Inc" },
    { combo: "RGB_HUD", description: "Hue Dec" },
    { combo: "RGB_SAI", description: "Sat Inc" },
    { combo: "RGB_SAD", description: "Sat Dec" },
    { combo: "RGB_VAI", description: "Val Inc" },
    { combo: "RGB_VAD", description: "Val Dec" },
  ]
};

// Initial grid where all cells are null, indicating an unconfigured state
const initialGrid = Array(3).fill().map(() => Array(3).fill({ tap: null, hold: null }));

// Modal component for displaying messages
const Modal = ({ show, title, message, onClose }) => {
  if (!show) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50">
      <div className="bg-zinc-800 text-white p-6 rounded-lg shadow-xl max-w-sm w-full border-2 border-red-500">
        <h3 className="text-xl font-bold mb-4 text-red-400">{title}</h3>
        {message && <p className="mb-4">{message}</p>}
        <div className="flex justify-end">
          <button
            onClick={onClose}
            className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-xl shadow-lg transition-colors duration-200"
          >
            OK
          </button>
        </div>
      </div>
    </div>
  );
};

export default function Configurator() {
  const [keymap, setKeymap] = useState(initialGrid);
  const [shortcutPool, setShortcutPool] = useState(Object.fromEntries(Object.entries(presets).map(([k, v]) => [k, [...v]])));
  const [showModal, setShowModal] = useState(false);
  const [modalContent, setModalContent] = useState({ title: "", message: "" });
  const [draggedShortcut, setDraggedShortcut] = useState(null); // To store the shortcut being dragged from the pool
  const [activeTab, setActiveTab] = useState('keymap'); // State for sidebar navigation
  const [jsonInput, setJsonInput] = useState(''); // State for JSON input in settings

  // State for Key Tester
  const [pressedKeys, setPressedKeys] = useState([]);

  // State for Macros
  const [macros, setMacros] = useState([
    { id: 1, name: "Hello World", sequence: "Hello World!" },
    { id: 2, name: "Signature", sequence: "John Doe\nSoftware Engineer" },
  ]);
  const [nextMacroId, setNextMacroId] = useState(3);

  // Custom scrollbar for modal options (though options are removed from modal, keeping for general styling)
  useEffect(() => {
    const style = document.createElement('style');
    style.innerHTML = `
      .custom-scrollbar::-webkit-scrollbar {
        width: 8px;
      }
      .custom-scrollbar::-webkit-scrollbar-track {
        background: #3f3f46; /* zinc-700 */
        border-radius: 10px;
      }
      .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #ef4444; /* red-500 */
        border-radius: 10px;
      }
      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #dc2626; /* red-600 */
      }
    `;
    document.head.appendChild(style);
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  // Load profile on component mount
  useEffect(() => {
    loadProfile();
  }, []);

  // Key Tester Event Listeners
  useEffect(() => {
    if (activeTab === 'keytester') {
      const handleKeyDown = (e) => {
        e.preventDefault(); // Prevent default browser actions for keys
        setPressedKeys(prev => {
          const newKey = { key: e.key, code: e.code, timestamp: Date.now() };
          // Only add if not already pressed, or if it's a new press after release
          if (!prev.some(k => k.code === e.code && k.type === 'down')) {
            return [...prev, { ...newKey, type: 'down' }];
          }
          return prev;
        });
      };

      const handleKeyUp = (e) => {
        e.preventDefault(); // Prevent default browser actions for keys
        setPressedKeys(prev => prev.filter(k => k.code !== e.code));
      };

      window.addEventListener('keydown', handleKeyDown);
      window.addEventListener('keyup', handleKeyUp);

      return () => {
        window.removeEventListener('keydown', handleKeyDown);
        window.removeEventListener('keyup', handleKeyUp);
      };
    } else {
      setPressedKeys([]); // Clear pressed keys when not in key tester tab
    }
  }, [activeTab]);

  // Check if the keymap is empty (all cells are null)
  const isKeymapEmpty = keymap.flat().every(cell => cell.tap === null && cell.hold === null);

  // Handles dropping a draggable item onto a keymap cell
  const handleDrop = (e, row, col) => {
    e.preventDefault();
    const data = e.dataTransfer.getData("text/plain");

    const updatedKeymap = [...keymap];

    try {
      const droppedItem = JSON.parse(data);

      if (droppedItem.isKeymapCell) {
        // This is a keymap cell being dragged (reordering)
        const sourceRow = droppedItem.sourceRow;
        const sourceCol = droppedItem.sourceCol;

        // Swap the cells
        const tempCell = updatedKeymap[row][col];
        updatedKeymap[row][col] = droppedItem.cell;
        updatedKeymap[sourceRow][sourceCol] = tempCell;
      } else {
        // This is a shortcut from the pool being dragged (assigning)
        updatedKeymap[row][col] = { tap: droppedItem, hold: null }; // Store the full shortcut object
      }
      setKeymap(updatedKeymap);
    } catch (error) {
      console.error("Failed to parse dropped data:", error);
      // Fallback for plain text if JSON parsing fails (e.g., old drag data)
      updatedKeymap[row][col] = { tap: { combo: data, description: data }, hold: null };
      setKeymap(updatedKeymap);
    }
    setDraggedShortcut(null); // Clear the dragged shortcut after drop
  };

  // Handles starting a drag operation from a keymap cell
  const handleKeymapDragStart = (e, cell, row, col) => {
    // Store the entire cell object and its original position
    const dragData = JSON.stringify({ isKeymapCell: true, cell: cell, sourceRow: row, sourceCol: col });
    e.dataTransfer.setData("text/plain", dragData);
  };

  // Handles starting a drag operation from a shortcut pool item
  const handleShortcutDragStart = (e, shortcut) => {
    // Store the entire shortcut object (combo and description)
    e.dataTransfer.setData("text/plain", JSON.stringify(shortcut));
    setDraggedShortcut(shortcut); // Store the shortcut being dragged
  };

  // Handles drag end for visual feedback
  const handleDragEnd = () => {
    setDraggedShortcut(null); // Clear the dragged shortcut on drag end
  };

  const saveProfile = () => {
    localStorage.setItem("micropad_keymap", JSON.stringify(keymap));
    setModalContent({
      title: "Profile Saved",
      message: "Profile saved to browser storage."
    });
    setShowModal(true);
  };

  const loadProfile = () => {
    const saved = localStorage.getItem("micropad_keymap");
    if (saved) {
      setKeymap(JSON.parse(saved));
      setModalContent({
        title: "Profile Loaded",
        message: "Profile loaded successfully."
      });
    } else {
      setModalContent({
        title: "No Profile Found",
        message: "No saved profile found."
      });
    }
    setShowModal(true);
  };

  // Update preset now takes app, index, and the new shortcut object {combo, description}
  const updatePreset = (app, index, newShortcut) => {
    const newPool = { ...shortcutPool };
    newPool[app][index] = newShortcut;
    setShortcutPool(newPool);
  };

  const exportKeymap = () => {
    const fullMap = {
      layout: "3x3",
      layers: {
        default: keymap.map(row => row.map(cell => ({
          tap: cell.tap ? cell.tap.combo : "", // Export only the combo
          hold: cell.hold ? cell.hold.combo : ""
        }))),
      },
    };
    const blob = new Blob([JSON.stringify(fullMap, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "keymap.json";
    a.click();
    setModalContent({
      title: "Export Successful",
      message: "Keymap exported as keymap.json."
    });
    setShowModal(true);
  };

  const uploadToDevice = async () => {
    try {
      const port = await navigator.serial.requestPort();
      await port.open({ baudRate: 115200 });
      const writer = port.writable.getWriter();
      const fullMap = {
        layout: "3x3",
        layers: {
          default: keymap.map(row => row.map(cell => ({
            tap: cell.tap ? cell.tap.combo : "", // Export only the combo
            hold: cell.hold ? cell.hold.combo : ""
          }))),
        },
      };
      const json = JSON.stringify(fullMap);
      const encoder = new TextEncoder();
      await writer.write(encoder.encode(json));
      writer.releaseLock();
      await port.close();
      setModalContent({
        title: "Upload Successful",
        message: "Keymap uploaded successfully!"
      });
    } catch (err) {
      setModalContent({
        title: "Upload Failed",
        message: "Failed to upload: " + err.message
      });
    } finally {
      setShowModal(true);
    }
  };

  const loadJsonFromTextArea = () => {
    try {
      const parsedJson = JSON.parse(jsonInput);
      if (parsedJson.layers && parsedJson.layers.default) {
        // Assuming the JSON structure is compatible with our 3x3 grid
        // We need to convert the combo-only format back to combo+description objects
        const newKeymap = parsedJson.layers.default.map(row =>
          row.map(combo => {
            // Try to find a matching description from presets or use combo as description
            const foundPreset = Object.values(presets).flat().find(p => p.combo === combo);
            return {
              tap: combo ? { combo: combo, description: foundPreset ? foundPreset.description : combo } : null,
              hold: null // Assuming loaded JSON doesn't have hold for simplicity
            };
          })
        );
        // Ensure the loaded keymap is 3x3, pad or truncate if necessary
        const finalKeymap = Array(3).fill().map((_, rIdx) =>
          Array(3).fill().map((_, cIdx) =>
            newKeymap[rIdx] && newKeymap[rIdx][cIdx] ? newKeymap[rIdx][cIdx] : { tap: null, hold: null }
          )
        );
        setKeymap(finalKeymap);
        setModalContent({
          title: "JSON Loaded",
          message: "Keymap loaded from text area successfully."
        });
      } else {
        setModalContent({
          title: "Invalid JSON",
          message: "The pasted JSON does not contain a valid 'layers.default' structure."
        });
      }
    } catch (error) {
      setModalContent({
        title: "JSON Parsing Error",
        message: "Failed to parse JSON: " + error.message
      });
    } finally {
      setShowModal(true);
    }
  };

  // Macro functions
  const addMacro = () => {
    const name = prompt("Enter macro name:");
    if (!name) return;
    const sequence = prompt("Enter macro sequence (e.g., 'Hello World!'):");
    if (sequence) {
      setMacros(prev => [...prev, { id: nextMacroId, name, sequence }]);
      setNextMacroId(prev => prev + 1);
    }
  };

  const editMacro = (id) => {
    const macroToEdit = macros.find(m => m.id === id);
    if (!macroToEdit) return;

    const newName = prompt(`Edit name for "${macroToEdit.name}":`, macroToEdit.name);
    if (newName === null) return; // User cancelled

    const newSequence = prompt(`Edit sequence for "${macroToEdit.name}":`, macroToEdit.sequence);
    if (newSequence === null) return; // User cancelled

    setMacros(prev => prev.map(m =>
      m.id === id ? { ...m, name: newName, sequence: newSequence } : m
    ));
  };

  const deleteMacro = (id) => {
    if (window.confirm("Are you sure you want to delete this macro?")) {
      setMacros(prev => prev.filter(m => m.id !== id));
    }
  };


  return (
    <div className="min-h-screen bg-zinc-800 text-white flex font-inter">
      {/* Sidebar */}
      <div className="w-64 bg-zinc-900 p-6 flex flex-col border-r border-zinc-700 shadow-xl">
        <div className="text-2xl font-bold text-red-500 mb-8">Trkey</div>
        <nav className="flex-grow">
          <ul className="space-y-4">
            <li>
              <a href="#" onClick={() => setActiveTab('keymap')} className={`flex items-center ${activeTab === 'keymap' ? 'text-red-300' : 'text-zinc-400'} hover:text-red-500 font-semibold text-lg transition-colors duration-200`}>
                <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                KEYMAP
              </a>
            </li>
            <li>
              <a href="#" onClick={() => setActiveTab('macros')} className={`flex items-center ${activeTab === 'macros' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M12 6.293V4a1 1 0 00-1-1H5a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 001-1v-2.293l1.707 1.707a1 1 0 001.414-1.414l-4-4a1 1 0 00-1.414 0l-4 4a1 1 0 001.414 1.414L10 10.414V12a1 1 0 001 1h2a1 1 0 001-1V8.293l1.707 1.707a1 1 0 001.414-1.414l-4-4z"></path></svg>
                MACROS
              </a>
            </li>
            {/* Removed Lighting link */}
            <li>
              <a href="#" onClick={() => setActiveTab('save-load')} className={`flex items-center ${activeTab === 'save-load' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z"></path></svg>
                SAVE + LOAD
              </a>
            </li>
            <li>
              <a href="#" onClick={() => setActiveTab('settings')} className={`flex items-center ${activeTab === 'settings' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M10 2a1 1 0 00-1 1v1a1 1 0 002 0V3a1 1 0 00-1-1zm4 4a1 1 0 011 1v1a1 1 0 01-2 0V7a1 1 0 011-1zM6 6a1 1 0 00-1 1v1a1 1 0 002 0V7a1 1 0 00-1-1zm0 8a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zm8 0a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zm-4 4a1 1 0 00-1 1v1a1 1 0 002 0v-1a1 1 0 00-1-1zM2 10a1 1 0 001 1h1a1 1 0 000-2H3a1 1 0 00-1 1zm14 0a1 1 0 001 1h1a1 1 0 000-2h-1a1 1 0 00-1 1zM7 10a3 3 0 116 0 3 3 0 01-6 0z"></path></svg>
                SETTINGS
              </a>
            </li>
            <li>
              <a href="#" onClick={() => setActiveTab('keytester')} className={`flex items-center ${activeTab === 'keytester' ? 'text-red-300' : 'text-zinc-400'} hover:text-white transition-colors duration-200`}>
                <svg className="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 20 20"><path d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 00-1 1v10a1 1 0 001 1h12a1 1 0 001-1V5a1 1 0 00-1-1h-3.382l-.724-1.447A1 1 0 0011 2H9zM4 6h12v8H4V6z"></path></svg>
                KEY TESTER
              </a>
            </li>
          </ul>
        </nav>
        <div className="text-sm text-zinc-500 mt-auto">
          <p>Version 1.0</p>
          <p>Device: Micropad</p>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-grow p-8 bg-zinc-800 flex flex-col">
        {/* Top Bar */}
        <div className="flex justify-between items-center mb-8 pb-4 border-b border-zinc-700">
          <div className="flex space-x-6">
            <span className="text-lg font-semibold text-red-400">CONFIGURE</span>
            <span className="text-lg text-zinc-400">KEY TESTER</span>
            <span className="text-lg text-zinc-400">SETTINGS</span>
          </div>
          <div className="text-zinc-500">
            <span className="mr-2">1UP60HSE</span>
            <button className="bg-zinc-700 px-3 py-1 rounded-md text-sm hover:bg-zinc-600 transition-colors duration-200">
              <svg className="w-4 h-4 inline-block mr-1" fill="currentColor" viewBox="0 0 20 20"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path><path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"></path></svg>
              LIVE
            </button>
          </div>
        </div>

        {activeTab === 'keymap' && (
          <>
            {/* Keymap Section */}
            <div className="mb-10">
              <h2 className="text-xl font-bold text-red-300 mb-4">KEYMAP</h2>
              <div className="flex space-x-2 mb-6">
                {['0', '1', '2', '3'].map(layer => (
                  <button
                    key={layer}
                    className={`px-4 py-2 rounded-md font-semibold text-lg transition-colors duration-200 ${layer === '0' ? 'bg-red-600 text-white' : 'bg-zinc-700 text-zinc-300 hover:bg-zinc-600'}`}
                  >
                    {layer}
                  </button>
                ))}
              </div>

              {/* Conditional rendering of the micropad grid */}
              {!isKeymapEmpty ? (
                <div className="bg-zinc-900 p-6 rounded-lg shadow-inner border border-zinc-700 w-fit mx-auto">
                  <div className="grid grid-cols-3 gap-2">
                    {keymap.map((row, rIdx) =>
                      row.map((cell, cIdx) => (
                        <div
                          key={`${rIdx}-${cIdx}`}
                          draggable
                          onDragStart={(e) => handleKeymapDragStart(e, cell, rIdx, cIdx)}
                          onDrop={(e) => handleDrop(e, rIdx, cIdx)}
                          onDragOver={(e) => e.preventDefault()}
                          onDragEnd={handleDragEnd}
                          // Visual feedback for drag over
                          className={`
                            w-24 h-24 bg-zinc-700 text-white rounded-md shadow-md border border-zinc-600
                            flex flex-col justify-center items-center cursor-grab active:cursor-grabbing
                            relative overflow-hidden
                            transform transition-all duration-200
                            ${draggedShortcut ? 'border-dashed border-red-300' : 'hover:bg-red-600 hover:scale-105'}
                          `}
                        >
                          <div className="absolute inset-0 bg-gradient-to-br from-zinc-800 to-zinc-700 rounded-md"></div>
                          <div className="relative z-10 text-sm font-bold text-red-200 drop-shadow-md text-center px-1">
                            {cell.tap ? cell.tap.description || cell.tap.combo : ""}
                          </div>
                          {cell.hold && <div className="relative z-10 text-xs text-zinc-400 mt-1">/ {cell.hold.description || cell.hold.combo}</div>}
                        </div>
                      ))
                    )}
                  </div>
                </div>
              ) : (
                <div className="bg-zinc-900 p-6 rounded-lg shadow-inner border border-zinc-700 h-48 flex items-center justify-center text-zinc-400 text-lg text-center">
                  No keymap loaded. Drag shortcuts from the pool below to configure your micropad, or load a saved profile from Settings.
                </div>
              )}
            </div>

            {/* Shortcut Pool */}
            <div className="mt-10 w-full">
              <h2 className="text-xl text-red-400 font-bold mb-4">SHORTCUTS</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {Object.entries(shortcutPool).map(([app, shortcuts]) => (
                  <div key={app} className="mb-4 bg-zinc-900 p-5 rounded-xl shadow-xl border border-red-600">
                    <h3 className="text-lg font-semibold mb-3 text-red-300 border-b border-red-500 pb-2">{app}</h3>
                    <div className="flex flex-wrap gap-2">
                      {shortcuts.map((s, i) => (
                        <div
                          key={`${app}-${i}`}
                          draggable
                          onDragStart={(e) => handleShortcutDragStart(e, s)}
                          onDragEnd={handleDragEnd}
                          className="
                            px-4 py-2 bg-zinc-700 text-white rounded-full shadow-md cursor-grab
                            hover:bg-red-500 hover:scale-105 transition-all duration-200
                            flex items-center justify-center text-sm font-medium
                            relative
                          "
                        >
                          {s.description || s.combo} {/* Display description */}
                          {/* Input for editing shortcut */}
                          <input
                            type="text"
                            value={s.combo} // Input value is the combo
                            onChange={(e) => updatePreset(app, i, { ...s, combo: e.target.value, description: s.description || e.target.value })}
                            onClick={(e) => e.stopPropagation()} // Prevent drag start on click
                            className="absolute inset-0 w-full h-full bg-transparent text-transparent border-none focus:outline-none cursor-text opacity-0"
                            style={{ zIndex: 10 }} // Ensure input is clickable
                          />
                        </div>
                      ))}
                    </div>
                    {/* Add New Shortcut Button */}
                    <button
                      onClick={() => {
                        const combo = prompt(`Enter new key combination for ${app}:`);
                        if (combo) {
                          const description = prompt(`Enter description for ${combo}:`);
                          updatePreset(app, shortcuts.length, { combo, description: description || combo });
                        }
                      }}
                      className="mt-4 w-full bg-red-800 hover:bg-red-900 text-white text-sm py-2 rounded-lg transition-colors duration-200"
                    >
                      + Add Shortcut
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </>
        )}

        {activeTab === 'macros' && (
          <div className="w-full max-w-4xl mx-auto">
            <h2 className="text-xl font-bold text-red-300 mb-4">MACROS</h2>
            <div className="bg-zinc-900 p-6 rounded-lg shadow-inner border border-zinc-700 mb-6">
              <button
                onClick={addMacro}
                className="bg-red-600 hover:bg-red-700 px-6 py-3 rounded-full shadow-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-75 mb-4"
              >
                + Add New Macro
              </button>
              {macros.length === 0 ? (
                <p className="text-zinc-400">No macros defined yet.</p>
              ) : (
                <div className="space-y-4">
                  {macros.map(macro => (
                    <div key={macro.id} className="bg-zinc-800 p-4 rounded-md border border-zinc-700 flex justify-between items-center">
                      <div>
                        <h4 className="font-semibold text-lg text-red-200">{macro.name}</h4>
                        <p className="text-sm text-zinc-300 break-all">{macro.sequence}</p>
                      </div>
                      <div className="flex space-x-2">
                        <button onClick={() => editMacro(macro.id)} className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-md text-sm">Edit</button>
                        <button onClick={() => deleteMacro(macro.id)} className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded-md text-sm">Delete</button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'keytester' && (
          <div className="w-full max-w-4xl mx-auto">
            <h2 className="text-xl font-bold text-red-300 mb-4">KEY TESTER</h2>
            <div className="bg-zinc-900 p-6 rounded-lg shadow-inner border border-zinc-700 h-64 overflow-y-auto custom-scrollbar">
              <p className="text-zinc-400 mb-4">Press any key on your physical keyboard to see its key code and key value.</p>
              {pressedKeys.length === 0 ? (
                <p className="text-zinc-500">No keys pressed yet...</p>
              ) : (
                <ul className="space-y-2">
                  {pressedKeys.map((keyInfo, index) => (
                    <li key={index} className="bg-zinc-700 p-2 rounded-md font-mono text-sm">
                      <span className="text-red-300">Key:</span> {keyInfo.key} | <span className="text-blue-300">Code:</span> {keyInfo.code}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        )}

        {activeTab === 'save-load' && (
          <div className="flex flex-col items-center justify-center h-full text-zinc-400 text-2xl">
            <h2 className="text-xl font-bold text-red-300 mb-4">SAVE / LOAD Profile</h2>
            <div className="flex flex-wrap justify-center gap-4 mt-8">
              <button onClick={saveProfile} className="bg-zinc-700 hover:bg-zinc-600 px-6 py-3 rounded-full shadow-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-zinc-500 focus:ring-opacity-75">
                Save Profile
              </button>
              <button onClick={loadProfile} className="bg-zinc-700 hover:bg-zinc-600 px-6 py-3 rounded-full shadow-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-zinc-500 focus:ring-opacity-75">
                Load Profile
              </button>
            </div>
          </div>
        )}

        {activeTab === 'settings' && (
          <div className="flex flex-col items-center justify-center w-full text-zinc-400">
            <h2 className="text-xl font-bold text-red-300 mb-4">SETTINGS</h2>

            <div className="bg-zinc-900 p-6 rounded-lg shadow-inner border border-zinc-700 w-full max-w-4xl mb-8">
              <h3 className="text-lg font-semibold text-red-300 mb-4">QMK JSON Configuration</h3>
              <p className="mb-4 text-sm">
                You can export your current micropad keymap as JSON, upload it to your device, or load a keymap by pasting JSON below.
                Note: This configurator supports a 3x3 micropad layout.
              </p>
              <div className="flex flex-wrap justify-center gap-4 mb-6">
                <button onClick={exportKeymap} className="bg-red-600 hover:bg-red-700 px-6 py-3 rounded-full shadow-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-75">
                  Export Keymap JSON
                </button>
                <button onClick={uploadToDevice} className="bg-white text-black hover:bg-zinc-200 px-6 py-3 rounded-full shadow-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-75">
                  Upload Keymap to Device
                </button>
              </div>

              <h4 className="text-md font-semibold text-red-300 mb-2">Load JSON from Text Area</h4>
              <textarea
                className="w-full h-40 bg-zinc-800 text-white p-4 rounded-md border border-zinc-600 focus:outline-none focus:ring-2 focus:ring-red-500 font-mono text-sm"
                placeholder="Paste your QMK keymap JSON here..."
                value={jsonInput}
                onChange={(e) => setJsonInput(e.target.value)}
              ></textarea>
              <button
                onClick={loadJsonFromTextArea}
                className="mt-4 w-full bg-red-800 hover:bg-red-900 text-white text-lg py-3 rounded-full transition-colors duration-200 shadow-lg"
              >
                Load JSON
              </button>
            </div>

            {/* Live JSON Preview */}
            <h3 className="text-lg font-semibold text-red-300 mb-2">Current Keymap JSON Preview</h3>
            <pre className="mt-2 text-sm bg-zinc-900 p-6 rounded-lg text-left w-full max-w-4xl overflow-x-auto border border-red-500 font-mono shadow-inner">
              {JSON.stringify({ layout: "3x3", layers: { default: keymap.map(row => row.map(cell => ({
                tap: cell.tap ? cell.tap.combo : "", // Export only the combo
                hold: cell.hold ? cell.hold.combo : ""
              })))} }, null, 2)}
            </pre>
          </div>
        )}
      </div>

      <Modal
        show={showModal}
        title={modalContent.title}
        message={modalContent.message}
        onClose={() => setShowModal(false)}
      />
    </div>
  );
}
